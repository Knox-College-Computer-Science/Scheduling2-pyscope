from __future__ import annotations

import logging
from datetime import datetime, timezone
from typing import List
from uuid import uuid4

from sqlalchemy import DateTime, ForeignKey, Integer, String, Uuid
from sqlalchemy.orm import (
    Mapped,
    MappedAsDataclass,
    mapped_column,
    relationship,
)

from ..db import Base

logger = logging.getLogger(__name__)
logger.debug("_field.py")


class _Field(MappedAsDataclass, Base):
    """ """

    __tablename__ = "field"

    uuid: Mapped[Uuid] = mapped_column(
        Uuid,
        primary_key=True,
        nullable=False,
        init=False,
        default_factory=uuid4,
    )
    """
    The universally unique identifier (UUID) for this field. This UUID is
    automatically generated by the `~uuid.uuid4` function when a new field is
    created.
    """

    version_id: Mapped[int] = mapped_column(
        Integer, nullable=False, init=False
    )
    """
    The version ID for the field. This is used to track changed to the field
    and is automatically updated when the block is modified. The version ID is
    used to implement optimistic concurrency control to prevent multiple
    processes from updating the same field simultaneously. If a process attempts
    to modify a field with a stale version ID, a
    `~sqlalchemy.orm.exc.StaleDataError` exception is raised.
    """

    field_type: Mapped[str] = mapped_column(String, nullable=False, init=False)
    """
    The field type. This parameter can usually be ignored, as it is used only
    to implement polymorphism in the database schema. The field type is
    automatically set to ``"field"`` when a new field is created.
    """

    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        init=False,
        default=datetime.now(tz=timezone.utc),
    )
    """
    The date and time when the field was created. This is automatically set
    to the current date and time in Universal Time (UTC) when a
    new field is created.
    """

    last_modified_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True),
        nullable=False,
        init=False,
        default=datetime.now(tz=timezone.utc),
        onupdate=datetime.now(tz=timezone.utc),
    )
    """
    The date and time when the field was last modified. This is automatically
    set to the current date and time in Universal Time (UTC) when
    a new field is created and whenever the field is modified.
    """

    target_uuid: Mapped[Uuid] = mapped_column(
        ForeignKey("target.uuid"),
        nullable=False,
        init=False,
    )
    """
    The UUID of the `~pyscope.scheduling.Target` to observe.
    See the `target` attribute for more information.
    """

    target: Mapped[Target] = relationship(back_populates="fields")
    """
    The `~pyscope.scheduling.Target` to observe. The target contains the data
    needed to determine the position of the target in the sky.
    """

    config_uuid: Mapped[Uuid] = mapped_column(
        ForeignKey("instrument_configuration.uuid"),
        nullable=True,
        init=False,
    )
    """
    The UUID for the `~pyscope.telrun.InstrumentConfiguration`.
    See the `config` parameter for more information.
    """

    config: Mapped[InstrumentConfiguration | None] = relationship(
        back_populates="fields"
    )
    """
    The `~pyscope.telrun.InstrumentConfiguration` to use when observing the
    target.

    .. note::
        This parameter is optional and will default to the
        value of the `~pyscope.scheduling.ObservingBlock` default
        `~pyscope.telrun.InstrumentConfiguration` if not specified. It is
        often useful to set the configuration on the ObservingBlock level
        and separate the configuration from the field.

    """

    niter: Mapped[int] = mapped_column(Integer, nullable=False, default=1)
    """
    The number of iterations of this field to perform. This parameter is used
    to repeat the observation of the field multiple times. For example, if an
    observer wanted to use multiple exposures to observe a field, they could
    set this parameter to take those data in a single field instead of creating
    multiple fields for the same target.
    """

    __mapper_args__ = {
        "version_id_col": version_id,
        "polymorphic_on": field_type,
        "polymorphic_identity": "field",
    }

    def __post_init__(self):
        logger.debug("_Field = %s" % self.__repr__)
